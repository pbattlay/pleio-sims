// HARD-CODED PARAMETERS
// five QTL; one focal QTL
// two phenotypes
// focal QTL has no effect on pheno1
// p1 post-burn-in optima: 0,0
// p2 post-burn-in optima: -10,0

// VARIABLES
// MIG: migration rate
// PLEIO: all QTL mutational correlations
// EFF: all QTL mutation effect magnitude (a^2)

initialize() {
	initializeMutationRate(1e-7);
	
	// set up separate chromosomes
	rates = c(rep(c(2.5e-6, 0.5), 4), 1e-8);
	ends = c(499, 500, 999, 1000, 1499, 1500, 1999, 2000, 2499);
	initializeRecombinationRate(rates, ends);
	
	// non-focal QTL mutation
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;
	m1.color = "red";
	
	// focal QTL mutation
	initializeMutationType("m2", 0.5, "f", 0.0);
	m2.convertToSubstitution = F;
	m2.color = "green";
	
	// non-focal QTL
	initializeGenomicElementType("g1", m1, 1.0);
	
	// focal QTL
	initializeGenomicElementType("g2", m2, 1.0);
		
	// CHROMOSOME STRUCTURE (5 QTL)
	initializeGenomicElement(g2, 0, 499);
	initializeGenomicElement(g1, 500, 999);
	initializeGenomicElement(g1, 1000, 1499);
	initializeGenomicElement(g1, 1500, 1999);
	initializeGenomicElement(g1, 2000, 2499);

	defineConstant("VS", 125);
	
	// CORRELATION
	defineConstant("m1_corr", PLEIO);
	defineConstant("m2_corr", PLEIO);
	
	// VARIANCE
	defineConstant("m1_var", EFF);
	defineConstant("m2_var", EFF);
	
	// QTL-related constants
	defineConstant("m1_mu", c(0, 0));
	defineConstant("m2_mu", c(0, 0));
	
	defineConstant("m1_cov", m1_corr * m1_var);
	defineConstant("m2_cov", m2_corr * m2_var);
	
	defineConstant("m1_sigma", matrix(c(m1_var, m1_cov, m1_cov, m1_var), nrow=2));
	defineConstant("m2_sigma", matrix(c(m2_var, m2_cov, m2_cov, m2_var), nrow=2));
	
	// phenotypic optima
	defineConstant("opt_p1", c(0, 0));
	defineConstant("opt_p2", c(-10, 0));
}

// create 2 subpopulations with 1000 individuals each
1 late() {
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 1000);
	p1.setMigrationRates(c(p2), c(MIG));
	p2.setMigrationRates(c(p1), c(MIG));
}

// draw mutational effects for new non-focal QTL mutation
mutation(m1) {
	effects = rmvnorm(1, m1_mu, m1_sigma);
	mut.setValue("e0", effects[0]);
	mut.setValue("e1", effects[1]);
	return T;
}

// draw mutational effects for new focal QTL mutation
// e1 set to 0: focal mutation no effect on pheno1
mutation(m2) {
	effects = rmvnorm(1, m2_mu, m2_sigma);
	mut.setValue("e0", effects[0]);
	mut.setValue("e1", 0);
	return T;
}

1:20000 late() {
	for (subpop in c(p1, p2))
	{
		for (ind in subpop.individuals)
		{
			// construct phenotypes from additive effects of QTL mutations
			muts1 = ind.genomes.mutationsOfType(m1);
			muts2 = ind.genomes.mutationsOfType(m2);
			phenotype0 = size(muts1) ? sum(muts1.getValue("e0")) else 0.0;
			phenotype0 = size(muts2) ? phenotype0 + sum(muts2.getValue("e0")) else phenotype0;
			phenotype1 = size(muts1) ? sum(muts1.getValue("e1")) else 0.0;
			phenotype1 = size(muts2) ? phenotype1 + sum(muts2.getValue("e1")) else phenotype1;
			ind.setValue("phenotype0", phenotype0);
			ind.setValue("phenotype1", phenotype1);
		
			// calculate fitness effects
			QTL_optima = opt_p1;
			effect0 = exp(-1*(QTL_optima[0] - phenotype0)^2 /(2*VS));
			effect1 = exp(-1*(QTL_optima[1] - phenotype1)^2 /(2*VS));
			ind.fitnessScaling = effect0 * effect1;
		}
	}
}

20000:40000 late() {
	for (subpop in c(p1, p2))
	{
		for (ind in subpop.individuals)
		{
			// construct phenotypes from additive effects of QTL mutations
			muts1 = ind.genomes.mutationsOfType(m1);
			muts2 = ind.genomes.mutationsOfType(m2);
			phenotype0 = size(muts1) ? sum(muts1.getValue("e0")) else 0.0;
			phenotype0 = size(muts2) ? phenotype0 + sum(muts2.getValue("e0")) else phenotype0;
			phenotype1 = size(muts1) ? sum(muts1.getValue("e1")) else 0.0;
			phenotype1 = size(muts2) ? phenotype1 + sum(muts2.getValue("e1")) else phenotype1;
			ind.setValue("phenotype0", phenotype0);
			ind.setValue("phenotype1", phenotype1);
		
			// calculate fitness effects
			QTL_optima = (subpop == p1 ? opt_p1 else opt_p2);
			effect0 = exp(-1*(QTL_optima[0] - phenotype0)^2 /(2*VS));
			effect1 = exp(-1*(QTL_optima[1] - phenotype1)^2 /(2*VS));
			ind.fitnessScaling = effect0 * effect1;
		}
	}
	
	// output, run every 1000 generations
 	if (sim.generation % 1000 != 0)
		return;

	// MUTATIONS IN NON-FOCAL QTL
	QTL_m1 = sim.mutationsOfType(m1);
	
	// subpopulation frequencies
	p1_m1_f = sim.mutationFrequencies(p1, QTL_m1);
	p2_m1_f = sim.mutationFrequencies(p2, QTL_m1);
	
	// mutation location
	m1_p = QTL_m1.position;
	
	// phenotype 0 effect size (non-focal QTL)
	if (size(QTL_m1) != 0) m1_e0 = QTL_m1.getValue("e0");
	
	// phenotype 1 effect size (non-focal QTL)
	if (size(QTL_m1) != 0) m1_e1 = QTL_m1.getValue("e1");
	
	// output location, effect sizes, subpop frequencies
	for (i in seqAlong(QTL_m1))
	catn(sim.generation + " " + m1_p[i] + " " + m1_e0[i] + " " + m1_e1[i]+ " " + p1_m1_f[i]+ " " + p2_m1_f[i]);
	
	// MUTATIONS IN FOCAL QTL
	QTL_m2 = sim.mutationsOfType(m2);
	
	// subpopulation frequencies
	p1_m2_f = sim.mutationFrequencies(p1, QTL_m2);
	p2_m2_f = sim.mutationFrequencies(p2, QTL_m2);
	
	// mutation location	
	m2_p = QTL_m2.position;
	
	// phenotype 0 effect size (focal QTL)
	if (size(QTL_m2) != 0) m2_e0 = QTL_m2.getValue("e0");
	
	// phenotype 1 effect size (focal QTL)
	if (size(QTL_m2) != 0) m2_e1 = QTL_m2.getValue("e1");
		
	// output location, effect sizes, subpop frequencies
	for (i in seqAlong(QTL_m2))
	catn(sim.generation + " " + m2_p[i] + " " + m2_e0[i] + " " + m2_e1[i]+ " " + p1_m2_f[i]+ " " + p2_m2_f[i]);
}
